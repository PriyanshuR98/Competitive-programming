#include <bits/stdc++.h>
using namespace std;

// TC: O(NlogN);
// SC: 2*(4*N) ~ O(N);
// Segment Trees: Point Update & Range Update

int n; // size of the array...
vector<int> arr, segment, lazy;

void buildSegmentTree(int ind, int left, int right) {
    // Base Case
    if (left == right) {
        segment[ind] = arr[left];
        return;
    }
    int mid = (left + right) / 2;
    buildSegmentTree(2 * ind + 1, left, mid);
    buildSegmentTree(2 * ind + 2, mid + 1, right);
    segment[ind] = segment[2 * ind + 1] + segment[2 * ind + 2];
}

void pointUpdate(int ind, int left, int right, int node, int val) {
    if (left == right) {
        arr[left] += val;
        segment[ind] += val;
    } else {
        int mid = (left + right) / 2;
        if (left <= node && node <= mid) 
            pointUpdate(2 * ind + 1, left, mid, node, val);
        else 
            pointUpdate(2 * ind + 2, mid + 1, right, node, val);

        segment[ind] = segment[2 * ind + 1] + segment[2 * ind + 2];
    }
}

void rangeUpdate(int ind, int left, int right, int l, int r, int val) {
    if (lazy[ind]) {
        segment[ind] = (right - left + 1) * lazy[ind];
        if (left != right) {
            lazy[2 * ind + 1] += lazy[ind];
            lazy[2 * ind + 2] += lazy[ind];
        }
        lazy[ind] = 0;
    }

    // If range is completely outside...
    if (r < left || right < l || left > right) return;

    // If range is completely inside...
    if (left >= l && right <= r) {
        segment[ind] += (right - left + 1) * val;
        if (left != right) {
            lazy[2 * ind + 1] += val;
            lazy[2 * ind + 2] += val;
        }
        return;
    }

    // If range is partially inside or partially outside...
    int mid = (left + right) / 2;
    rangeUpdate(2 * ind + 1, left, mid, l, r, val);
    rangeUpdate(2 * ind + 2, mid + 1, right, l, r, val);
    segment[ind] = segment[2 * ind + 1] + segment[2 * ind + 2];
}

int querySumLazy(int ind, int left, int right, int l, int r) {
    if (lazy[ind]) {
        segment[ind] += (right - left + 1) * lazy[ind];
        if (left != right) {
            lazy[2 * ind + 1] += lazy[ind];
            lazy[2 * ind + 2] += lazy[ind];
        }
        lazy[ind] = 0;
    }

    // If range is completely outside...
    if (r < left || right < l || left > right) return 0;

    // If range is completely inside...
    if (left >= l && right <= r) {
        return segment[ind];
    }

    // If range is partially inside or partially outside...
    int mid = (right + left) / 2;
    int leftSide = querySumLazy(2 * ind + 1, left, mid, l, r);
    int rightSide = querySumLazy(2 * ind + 2, mid + 1, right, l, r);
    return leftSide + rightSide;
}

void buildSegment(int N) {
    n = N;
    buildSegmentTree(0, 0, n - 1);
}

void printArray() {
    cout << "Array is : ";
    for (int i = 0; i < n; i++) cout << arr[i] << " ";
    cout << endl;
}

int querySumLazyBro(int left, int right) {
    return querySumLazy(0, 0, n - 1, left, right);
}

void pointUpdateBro(int node, int val) {
    pointUpdate(0, 0, n - 1, node, val);
}

void rangeUpdateBro(int left, int right, int val) {
    rangeUpdate(0, 0, n - 1, left, right, val);
}

int main() {

    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int N;
    cin >> N;
    n = N;
    arr.resize(n);
    segment.resize(4 * n);
    lazy.resize(4 * n, 0);
    for (int i = 0; i < n; i++) cin >> arr[i];

    buildSegment(n);


    
    // printArray();

    // cout << "Sum of the Array: " << querySumLazyBro(0, n - 1) << endl;
    // cout << "Doing Point Update at index 2 with value 5..." << endl;
    // pointUpdateBro(2, 5);
    // printArray();

    // cout << "Sum in the range of 1 to 3: " << querySumLazyBro(1, 3) << endl;
    // cout << "Updating range 1 to 3 with value 10..." << endl;
    // rangeUpdateBro(1, 3, 10);
    // cout << "Sum in the range of 1 to 3: " << querySumLazyBro(1, 3) << endl;

    // return 0;
}

/*
Sample Input:
5
1 2 3 4 5 
*/
